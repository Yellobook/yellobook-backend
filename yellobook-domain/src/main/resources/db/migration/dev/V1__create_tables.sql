-- 사용자 테이블: 애플리케이션 사용자 정보를 관리
CREATE TABLE IF NOT EXISTS public.members
(
    id            BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 사용자 ID (기본 키)
    nickname      VARCHAR(20)  NOT NULL, -- 사용자 닉네임
    email         VARCHAR(255) NOT NULL
        CONSTRAINT uq_members_email UNIQUE, -- 이메일 (고유)
    role          VARCHAR(10)  NOT NULL
        CONSTRAINT ck_members_role
            CHECK (role IN ('ADMIN', 'USER')), -- 역할 (관리자 또는 사용자만 허용)
    allowance     BOOLEAN      NOT NULL, -- 사용자 권한 상태
    profile_image VARCHAR(255), -- 프로필 이미지
    created_at    TIMESTAMP(6), -- 생성 시각
    updated_at    TIMESTAMP(6), -- 수정 시각
    deleted_at    TIMESTAMP(6)  -- 삭제 시각 (soft delete 를 위한 필드)
);

ALTER TABLE public.members
    OWNER TO root;

CREATE INDEX IF NOT EXISTS ix_members_email
    ON public.members (email); -- 이메일에 대한 인덱스 (빠른 검색을 위해)

-- 팀 테이블: 팀 정보를 관리
CREATE TABLE IF NOT EXISTS public.teams
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 팀 ID (기본 키)
    name         VARCHAR(40)  NOT NULL
        CONSTRAINT uq_team_name UNIQUE, -- 팀 이름 (고유)
    phone_number VARCHAR(20)  NOT NULL, -- 팀 전화번호
    address      VARCHAR(255) NOT NULL, -- 팀 주소
    created_at   TIMESTAMP(6), -- 생성 시각
    updated_at   TIMESTAMP(6)  -- 수정 시각
);

ALTER TABLE public.teams
    OWNER TO root;

-- 공지 테이블: 팀에 속한 공지 사항을 관리
CREATE TABLE IF NOT EXISTS public.informs
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 공지 ID (기본 키)
    member_id  BIGINT  NOT NULL
        CONSTRAINT fk_informs_member
            REFERENCES public.members (id), -- 작성자 (외래 키)
    team_id    BIGINT  NOT NULL
        CONSTRAINT fk_informs_team
            REFERENCES public.teams (id), -- 해당 팀 (외래 키)
    title      VARCHAR(255), -- 공지 제목
    content    VARCHAR(200), -- 공지 내용
    date       DATE    NOT NULL, -- 공지 날짜
    view       INTEGER NOT NULL, -- 조회수
    created_at TIMESTAMP(6), -- 생성 시각
    updated_at TIMESTAMP(6)  -- 수정 시각
);

ALTER TABLE public.informs
    OWNER TO root;

-- 공지 댓글 테이블: 공지에 대한 댓글 정보를 관리
CREATE TABLE IF NOT EXISTS public.inform_comments
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 댓글 ID (기본 키)
    inform_id  BIGINT       NOT NULL
        CONSTRAINT fk_inform_comments_inform
            REFERENCES public.informs (id), -- 공지 (외래 키)
    member_id  BIGINT       NOT NULL
        CONSTRAINT fk_inform_comments_member
            REFERENCES public.members (id), -- 댓글 작성자 (외래 키)
    content    VARCHAR(200) NOT NULL, -- 댓글 내용
    created_at TIMESTAMP(6), -- 생성 시각
    updated_at TIMESTAMP(6)  -- 수정 시각
);

ALTER TABLE public.inform_comments
    OWNER TO root;

-- 공지 멘션 테이블: 공지에서 언급된 사용자와의 관계를 관리
CREATE TABLE IF NOT EXISTS public.inform_mentions
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 멘션 ID (기본 키)
    inform_id  BIGINT NOT NULL
        CONSTRAINT fk_inform_mentions_inform
            REFERENCES public.informs (id), -- 공지 (외래 키)
    member_id  BIGINT NOT NULL
        CONSTRAINT fk_inform_mentions_member
            REFERENCES public.members (id), -- 언급된 사용자 (외래 키)
    created_at TIMESTAMP(6), -- 생성 시각
    updated_at TIMESTAMP(6), -- 수정 시각
    CONSTRAINT uq_inform_mentions_member_inform UNIQUE (member_id, inform_id) -- 멘션에 대한 유일성 제약 조건
);

ALTER TABLE public.inform_mentions
    OWNER TO root;

-- 재고 테이블: 팀의 재고 현황을 관리
CREATE TABLE IF NOT EXISTS public.inventories
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 재고 ID (기본 키)
    team_id    BIGINT       NOT NULL
        CONSTRAINT fk_inventories_team
            REFERENCES public.teams (id), -- 해당 팀 (외래 키)
    title      VARCHAR(255) NOT NULL, -- 재고 제목
    view       INTEGER      NOT NULL, -- 조회수
    created_at TIMESTAMP(6), -- 생성 시각
    updated_at TIMESTAMP(6)  -- 수정 시각
);

ALTER TABLE public.inventories
    OWNER TO root;

-- 팀 멤버 테이블: 팀과 멤버 간의 관계를 관리
CREATE TABLE IF NOT EXISTS public.participants
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 참여자 ID (기본 키)
    member_id  BIGINT       NOT NULL
        CONSTRAINT fk_participants_member
            REFERENCES public.members (id), -- 팀원 (외래 키)
    team_id    BIGINT       NOT NULL
        CONSTRAINT fk_participants_team
            REFERENCES public.teams (id), -- 팀 (외래 키)
    role       VARCHAR(255) NOT NULL
        CONSTRAINT ck_participants_role
            CHECK (role IN ('ADMIN', 'ORDERER', 'VIEWER')), -- 역할 (관리자, 주문자, 뷰어)
    created_at TIMESTAMP(6), -- 생성 시각
    updated_at TIMESTAMP(6), -- 수정 시각
    CONSTRAINT uq_participant_team_member UNIQUE (team_id, member_id) -- 팀과 멤버에 대한 유일성 제약 조건
);

ALTER TABLE public.participants
    OWNER TO root;

-- 제품 테이블: 재고에 포함된 제품 정보를 관리
CREATE TABLE IF NOT EXISTS public.products
(
    id             BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 제품 ID (기본 키)
    inventory_id   BIGINT      NOT NULL
        CONSTRAINT fk_products_inventory
            REFERENCES public.inventories (id), -- 재고 (외래 키)
    name           VARCHAR(30) NOT NULL, -- 제품 이름
    sub_product    VARCHAR(30), -- 하위 제품 (옵션)
    sku            INTEGER     NOT NULL, -- SKU (재고 관리 코드)
    amount         INTEGER     NOT NULL, -- 제품 수량
    purchase_price INTEGER     NOT NULL, -- 구매 가격
    sale_price     INTEGER     NOT NULL, -- 판매 가격
    created_at     TIMESTAMP(6), -- 생성 시각
    updated_at     TIMESTAMP(6), -- 수정 시각
    CONSTRAINT uq_inventory_sku UNIQUE (inventory_id, sku) -- 재고 내에서 SKU의 고유성 보장
);

ALTER TABLE public.products
    OWNER TO root;

-- 주문 테이블: 팀의 주문 정보를 관리
CREATE TABLE IF NOT EXISTS public.orders
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 주문 ID (기본 키)
    member_id    BIGINT  NOT NULL
        CONSTRAINT fk_orders_member
            REFERENCES public.members (id), -- 주문자 (외래 키)
    product_id   BIGINT
        CONSTRAINT fk_orders_product
            REFERENCES public.products (id), -- 주문한 제품 (외래 키)
    team_id      BIGINT
        CONSTRAINT fk_orders_team
            REFERENCES public.teams (id), -- 주문이 속한 팀 (외래 키)
    date         DATE    NOT NULL, -- 주문 날짜
    order_amount INTEGER NOT NULL, -- 주문 수량
    view         INTEGER NOT NULL, -- 조회수
    memo         VARCHAR(200), -- 메모
    order_status VARCHAR(255)
        CONSTRAINT ck_orders_order_status
            CHECK (order_status IN ('PENDING_CONFIRM', 'PENDING_MODIFY', 'CONFIRMED')), -- 주문 상태 (확인 대기, 수정 대기, 확인 완료)
    created_at   TIMESTAMP(6), -- 생성 시각
    updated_at   TIMESTAMP(6)  -- 수정 시각
);

ALTER TABLE public.orders
    OWNER TO root;

-- 주문 댓글 테이블: 주문에 대한 댓글 정보를 관리
CREATE TABLE IF NOT EXISTS public.order_comments
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 댓글 ID (기본 키)
    member_id  BIGINT       NOT NULL
        CONSTRAINT fk_order_comments_member
            REFERENCES public.members (id), -- 댓글 작성자 (외래 키)
    order_id   BIGINT       NOT NULL
        CONSTRAINT fk_order_comments_order
            REFERENCES public.orders (id), -- 해당 주문 (외래 키)
    content    VARCHAR(200) NOT NULL, -- 댓글 내용
    created_at TIMESTAMP(6), -- 생성 시각
    updated_at TIMESTAMP(6)  -- 수정 시각
);

ALTER TABLE public.order_comments
    OWNER TO root;

-- 주문 멘션 테이블: 주문에서 언급된 사용자와의 관계를 관리
CREATE TABLE IF NOT EXISTS public.order_mentions
(
    id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- 멘션 ID (기본 키)
    member_id  BIGINT NOT NULL
        CONSTRAINT fk_order_mentions_member
            REFERENCES public.members (id), -- 언급된 사용자 (외래 키)
    order_id   BIGINT NOT NULL
        CONSTRAINT fk_order_mentions_order
            REFERENCES public.orders (id), -- 해당 주문 (외래 키)
    created_at TIMESTAMP(6), -- 생성 시각
    updated_at TIMESTAMP(6), -- 수정 시각
    CONSTRAINT uq_order_mentions_member_order UNIQUE (member_id, order_id) -- 멘션에 대한 유일성 제약 조건
);

ALTER TABLE public.order_mentions
    OWNER TO root;
