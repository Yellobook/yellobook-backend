plugins {
    id 'io.spring.dependency-management'
    id "java-test-fixtures"
}

dependencies {
    compileOnly project(':core')

    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation "com.querydsl:querydsl-jpa:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    implementation "p6spy:p6spy:3.9.1"

    testImplementation 'org.testcontainers:testcontainers:1.20.1'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
    testImplementation "org.testcontainers:mysql:1.20.1"
    testImplementation "com.redis:testcontainers-redis:2.2.2"
    testImplementation project(':core') git
}


def generated = layout.buildDirectory.dir("generated/sources/annotationProcessor/java/main")


tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}


sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}


tasks.register("compileQuerydsl", JavaCompile) {
    group = "build"
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    destinationDirectory.set(file(generated))

    options.annotationProcessorPath = configurations.named("annotationProcessor").get()
    options.compilerArgs += [
            "-proc:only",
            "-s", file(generated).absolutePath
    ]
}


processResources.dependsOn('copyConfig')

tasks.register('copyConfig', Copy) {
    from '../../Config/yellobook-domain/'
    include "application*.yml"
    into 'src/main/resources'
}
