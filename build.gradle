plugins {
    id 'java'
    id 'org.springframework.boot' apply false
    id 'io.spring.dependency-management'
    id 'jacoco'
    id 'org.sonarqube'
}

ext {
    defineExcludes = {
        // 제외할 경로들 선언
        def excludes = []

        // QueryDSL Q 클래스 제외
        for (qPattern in 'QA'..'QZ') {
            excludes.add('**/${qPattern}*')
        }

        excludes.addAll([
                '**/*Application*',
                '**/*Config*',
                '**/aop/**',
                '**/error/**',
                '**/validation/**',
                '**/logging/**',
                '**/response/**'
        ])

        return excludes
    }
}

allprojects {
    group = projectGroup
    version = applicationVersion

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
    }
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(javaVersion)
        }
    }

    dependencies {
        // Lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        // MapStruct
        implementation 'org.mapstruct:mapstruct:1.5.5.Final'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

        // Spring Boot Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

jacoco {
    toolVersion = '0.8.9'
}

jacocoTestReport {
    // 서브프로젝트들의 태스크가 완료된 후 실행되도록 설정
    dependsOn subprojects.collect {
        it.tasks.named('check')
    }

    // 서브프로젝트의 .exec 파일을 포함
    executionData.from(fileTree(dir: '.', include: '**/build/jacoco/*.exec'))

    // 리포트 생성에서 제외할 경로
    def excludes = defineExcludes()

    // 커버리지를 계산할 클래스 파일들의 디렉토리 설정
    classDirectories.setFrom(files(subprojects.collect {
        // 서브프로젝트들의 컴파일된 클래스 파일이 저장되는 디렉토리
        it.sourceSets.main.output
    }).asFileTree.matching {
        exclude excludes
    })

    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('build/jacocoTestReportHtml')
        xml.outputLocation = file('build/reports/jacoco/test/jacocoTestReport.xml')
    }
}

sonar {
    properties {
        property 'sonar.projectKey', 'Yellobook_yellobook-backend'
        property 'sonar.organization', 'yellobook-server-sonar-cloud-key'
        property 'sonar.host.url', 'https://sonarcloud.io'
        // 빌드 후 생성된 리포트 활용
        property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile.absolutePath
    }
}